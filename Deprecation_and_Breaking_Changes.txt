TeaScript Breaking Changes in the actual release
=================================================

    Changes in CoreLibrary functionality
    ------------------------------------
    strat() / CoreLibrary::StrAt() will now return strings of length [0..4] depending on the utf-8 code point char amount.
    It will always return a full and complete utf-8 encoded glyph. If the wanted pos is in the middle
    of an utf-8 code point this complete utf-8 code point will be returned.
    
    readtextfile / CoreLibrary::ReadTextFile() will now do a complete UTF-8 validation of the read input.
    Also, it will not throw anymore but return Bool(false).


    Changes on C++ API level
    ------------------------------------
    Util.hpp is splitted in 3 files: Util.hpp, UtilContent.hpp, UtilInternal.hpp.
    Most likely you still only need Util.hpp.
    
    ASTNode::Eval() has been made const.
    
    Parser::Num() throws exception::parsing_error instead of std::out_of_range
    
    exception::bad_value_cast now inherits from exception::runtime_error (w. SoruceLocation) instead of std::bad_any_cast
    
    Engine::AddVar/AddConst w. unsigned int overload now adds a U64 instead of I64
    (NOTE: If a future U32/I32 will be added this overloads (and those for int) will change again/as well!)
    
    Tuple is first class citizen now. 
    This must be taken into account for a visitor applied to ValueObject::Visit.
    

    Visibility of Core Library functions
    ------------------------------------
    The following Core Library functions moved up to Level CoreReduced:
    
    _f64toi64
    
    The following Core Library functions moved up to Level Core:
    
    The following Core Library functions moved up to Level Util:
    
    The following Core Library functions moved up to Level Full:


TeaScript list of deprecated parts
=================================================

    The following deprecated parts have been finally removed from this release:
    
    bool Parser::Int( Content & )
    use Integer( Content & ) or Num( Content &, bool ) instead.

    func eval( sth_unspecified )  from TeaScript Core Library (use the not confusing _eval( code_string ) variant instead)

    
    The following parts are now deprecated and will be removed in some future release:
    
    Engine::ActivateDeprecatedDefaultMutableParameters()
    Please, change your script code to explicit mutable parameters with 'def' keyword.
    More deatails are available in the comment.
    
    CoreLibrary::DoubleToLongLong()
    This was the implementation for _f64toi64. In C++ just use a static_cast<long long>!
    
    ArithmeticFactory::ApplyBinOp()|ApplyUnOp()
    Please, use ArithmeticFactory::ApplyBinaryOp() and ArithmeticFactory::ApplyUnaryOp() instead.

    Context::BulkAdd()
    Please, use InjectVars() instead.
    
    Context( VariableStorage const &init, TypeSystem && rMovedSys, bool const booting )
    Please, uses a different constructor instead.