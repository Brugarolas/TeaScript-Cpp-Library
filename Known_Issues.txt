TeaScript Known Issues 
======================

Beside feature incompleteness there are the following known issues which will be fixed in a later (pre-)release.
NOTE: The numbers stay same, solved items will (usually) be removed in the next release from this list.
     

3.) [PLATFORM: any] Solved in 0.13 (explicit cast to variuos number types is posible now with the as operator
                                    e.g., n as i64 or x as f64 )


5.) [PLATFORM: Windows]
    Echo'ed(!) input of Unicode might be broken on Windows for the case if the Unicode glyph is 
    assembled as a surrogate pair in it's UTF-16 representation. This is a bug (or missing feature)
    inside the WIN32 API. See https://developercommunity.visualstudio.com/t/Bug-in-WIN32-API-ReadConsoleW-for-UTF-16/10252965
    Echo'ed input is present when
    - typing commands / code in the interactive shell. (TeaScript Host Application only)
    - request user input via readline() function.      (TeaScript Library and Host Application)
    
    Nevertheless, the read in data is correctly stored in it's UTF-8 representation and can be used without problems,
    e.g. printing the read data later on the screen will be correct.
    
    Hint: Ensure you are using "Windows Terminal" together with either PowerShell or Command Prompt to experience
    the best possible Unicode support on Windows.


6.) [PLATFORM: any]
    Parsing and/or Evaluation errors from inside in-string evaluation may show wrong source
    when pretty print it.
    For TeaScript Host Application use :debug enabled in interactive shell or --debug when executing script files for get
    a better pretty print.
    For TeaScript Library use Engine::SetDebugMode( true )

   
7.) [PLATFORM: Linux with gcc or clang w. libstdc++]
    Comparing values where at least one is a floating point and this value is not finite (e.g. NAN or infinity)
    will throw a teascript::exception::runtime_error. Actually, this exception cannot be caught within the 
    TeaScript code.
    On Windows (Visual Studio) and clang w. libc++ a total strong ordering will be performed and the values can be compared.

    
8.) [PLATFORM: Linux]
    CoreLibrary function clock_utc() will return UTC time _without_ leap seconds.

    
10.) [PLATFORM: any]
     Accessing nested tuples via index must be surrounded with parenthesis like this:
     (tup.0).1  // access index 1 of the tuple at index 0 of the tuple 'tup'.
     note: tup.0.1 is parsed to ID: tup, dot-op, f64( 0.1 ) which results only in index 0 of tup.
     WORKAROUND: since 0.11.0 Subscript Operator is implemented, use tup[0].1 or tup[0][1]  as a workaround.


13.) -

